// Generated by gencpp from file koenig/custom.msg
// DO NOT EDIT!


#ifndef KOENIG_MESSAGE_CUSTOM_H
#define KOENIG_MESSAGE_CUSTOM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace koenig
{
template <class ContainerAllocator>
struct custom_
{
  typedef custom_<ContainerAllocator> Type;

  custom_()
    : radmove(0.0)
    , pos(0.0)
    , radius(0.0)  {
    }
  custom_(const ContainerAllocator& _alloc)
    : radmove(0.0)
    , pos(0.0)
    , radius(0.0)  {
  (void)_alloc;
    }



   typedef double _radmove_type;
  _radmove_type radmove;

   typedef double _pos_type;
  _pos_type pos;

   typedef double _radius_type;
  _radius_type radius;





  typedef boost::shared_ptr< ::koenig::custom_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::koenig::custom_<ContainerAllocator> const> ConstPtr;

}; // struct custom_

typedef ::koenig::custom_<std::allocator<void> > custom;

typedef boost::shared_ptr< ::koenig::custom > customPtr;
typedef boost::shared_ptr< ::koenig::custom const> customConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::koenig::custom_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::koenig::custom_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace koenig

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'koenig': ['/home/jonathan/sources/myrepos/FH-ROS/MOR_UE1/src/koenig/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::koenig::custom_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::koenig::custom_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::koenig::custom_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::koenig::custom_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::koenig::custom_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::koenig::custom_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::koenig::custom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e608c3fdddc29a45d2145bc9a1790451";
  }

  static const char* value(const ::koenig::custom_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe608c3fdddc29a45ULL;
  static const uint64_t static_value2 = 0xd2145bc9a1790451ULL;
};

template<class ContainerAllocator>
struct DataType< ::koenig::custom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "koenig/custom";
  }

  static const char* value(const ::koenig::custom_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::koenig::custom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 radmove\n"
"float64 pos\n"
"float64 radius\n"
;
  }

  static const char* value(const ::koenig::custom_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::koenig::custom_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.radmove);
      stream.next(m.pos);
      stream.next(m.radius);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct custom_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::koenig::custom_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::koenig::custom_<ContainerAllocator>& v)
  {
    s << indent << "radmove: ";
    Printer<double>::stream(s, indent + "  ", v.radmove);
    s << indent << "pos: ";
    Printer<double>::stream(s, indent + "  ", v.pos);
    s << indent << "radius: ";
    Printer<double>::stream(s, indent + "  ", v.radius);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KOENIG_MESSAGE_CUSTOM_H
